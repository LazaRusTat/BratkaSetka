# battle.gd (–†–ï–§–ê–ö–¢–û–†–ò–ù–ì - –ì–õ–ê–í–ù–´–ô –ö–û–ù–¢–†–û–õ–õ–ï–†)
# –°–æ—Ö—Ä–∞–Ω–µ–Ω—ã: –∞–≤–∞—Ç–∞—Ä–∫–∏, HP –±–∞—Ä—ã, –∑–æ–Ω—ã –ø–æ–ø–∞–¥–∞–Ω–∏—è, –≥—Ä—É–ø–ø–æ–≤–æ–π –±–æ–π
extends CanvasLayer

signal battle_ended(victory: bool)

# ===== –ö–û–ú–ü–û–ù–ï–ù–¢–´ =====
var ui_manager
var logic_manager
var avatar_manager

# ===== –î–ê–ù–ù–´–ï =====
var player_data
var gang_members: Array = []
var is_first_battle: bool = false

# ===== –ü–û–°–õ–ï–î–ù–ò–ô –í–´–ë–û–† =====
var last_selected_target: int = 0
var last_selected_zone: String = "—Ç–æ—Ä—Å"

func _ready():
	layer = 200
	
	# –°–æ–∑–¥–∞—ë–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
	ui_manager = preload("res://scripts/battle/battle_ui_full.gd").new()
	logic_manager = preload("res://scripts/battle/battle_logic_full.gd").new()
	avatar_manager = preload("res://scripts/battle/battle_avatars.gd").new()
	
	add_child(ui_manager)
	add_child(logic_manager)
	add_child(avatar_manager)
	
	# –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã
	logic_manager.battle_won.connect(_on_battle_won)
	logic_manager.battle_lost.connect(_on_battle_lost)
	logic_manager.turn_changed.connect(_on_turn_changed)
	logic_manager.damage_dealt.connect(_on_damage_dealt)
	
	ui_manager.action_requested.connect(_on_player_action)

func setup(p_data: Dictionary, enemy_type: String = "gopnik", first_battle: bool = false):
	player_data = p_data
	is_first_battle = first_battle
	
	# –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–Ω–¥—É (–¢–´ + —Å–æ—é–∑–Ω–∏–∫–∏)
	var main_scene = get_tree().current_scene
	if main_scene and main_scene.has("gang_members"):
		gang_members = main_scene.gang_members.duplicate(true)
	else:
		gang_members = [{"name": "–¢—ã", "health": player_data["health"], "max_health": 100}]
	
	# –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤—Ä–∞–≥–æ–≤
	var enemies_count = 1 + randi() % 2  # 1-2 –≤—Ä–∞–≥–∞
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏–∫—É
	logic_manager.setup(gang_members, enemy_type, enemies_count, is_first_battle)
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≤–∞—Ç–∞—Ä–∫–∏
	avatar_manager.setup(gang_members, logic_manager.enemies)
	
	# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º UI
	ui_manager.setup(is_first_battle)
	
	# –ü–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
	update_display()
	
	if is_first_battle:
		ui_manager.add_log("‚ö†Ô∏è –ü–ï–†–í–´–ô –ë–û–ô - —É–±–µ–∂–∞—Ç—å –Ω–µ–ª—å–∑—è!")
	
	ui_manager.add_log("‚öîÔ∏è –ë–æ–π –Ω–∞—á–∞–ª—Å—è!")

# ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï –î–ò–°–ü–õ–ï–Ø =====
func update_display():
	var state = logic_manager.get_battle_state()
	avatar_manager.update_avatars(state)
	ui_manager.update_info(state)

# ===== –î–ï–ô–°–¢–í–ò–Ø –ò–ì–†–û–ö–ê =====
func _on_player_action(action_type: String, target: int = -1, zone: String = ""):
	match action_type:
		"attack":
			# ‚úÖ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤—ã–±–æ—Ä
			if target >= 0:
				last_selected_target = target
			if zone != "":
				last_selected_zone = zone
			
			logic_manager.player_attack(last_selected_target, last_selected_zone)
		"defend":
			logic_manager.player_defend()
		"use_item":
			logic_manager.player_use_item(target)
		"run":
			logic_manager.player_run()
	
	update_display()

# ===== –ê–ù–ò–ú–ê–¶–ò–Ø –£–†–û–ù–ê =====
func _on_damage_dealt(target_type: String, target_index: int, damage: int, zone: String):
	avatar_manager.show_damage_animation(target_type, target_index, damage, zone)

# ===== –°–ú–ï–ù–ê –•–û–î–ê =====
func _on_turn_changed(turn_owner: String):
	if turn_owner == "player":
		ui_manager.set_turn_info("–í–∞—à —Ö–æ–¥", true)
	elif turn_owner == "allies":
		ui_manager.set_turn_info("–•–æ–¥ —Å–æ—é–∑–Ω–∏–∫–æ–≤...", false)
		await get_tree().create_timer(1.0).timeout
		process_allies_turn()
	else:
		ui_manager.set_turn_info("–•–æ–¥ –≤—Ä–∞–≥–æ–≤...", false)
		await get_tree().create_timer(1.5).timeout
		logic_manager.process_enemy_turn()
		update_display()

# ===== –•–û–î–´ –°–û–Æ–ó–ù–ò–ö–û–í (–ê–í–¢–û–ú–ê–¢–ò–ß–ï–°–ö–ò–ï) =====
func process_allies_turn():
	var allies = logic_manager.get_allies()
	var enemies = logic_manager.get_enemies()
	
	for i in range(1, allies.size()):  # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–≥—Ä–æ–∫–∞ (–∏–Ω–¥–µ–∫—Å 0)
		var ally = allies[i]
		
		if ally["health"] <= 0:
			continue
		
		if enemies.size() == 0:
			break
		
		# –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–µ–ª—å
		var target_idx = randi() % enemies.size()
		var zone = ["–≥–æ–ª–æ–≤–∞", "—Ç–æ—Ä—Å", "—Ä—É–∫–∏", "–Ω–æ–≥–∏"][randi() % 4]
		
		ui_manager.add_log("ü§ù %s –∞—Ç–∞–∫—É–µ—Ç..." % ally["name"])
		await get_tree().create_timer(0.5).timeout
		
		logic_manager.ally_attack(i, target_idx, zone)
		update_display()
		
		await get_tree().create_timer(0.5).timeout
	
	# –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤—Ä–∞–≥–∞–º
	logic_manager.next_turn()

# ===== –ü–û–ë–ï–î–ê/–ü–û–†–ê–ñ–ï–ù–ò–ï =====
func _on_battle_won(reward: Dictionary):
	ui_manager.add_log("‚úÖ –ü–û–ë–ï–î–ê!")
	ui_manager.add_log("üí∞ –ü–æ–ª—É—á–µ–Ω–æ: %d —Ä—É–±., +%d —Ä–µ–ø—É—Ç–∞—Ü–∏–∏" % [reward["money"], reward["reputation"]])
	
	await get_tree().create_timer(2.5).timeout
	
	# –°–æ—Ö—Ä–∞–Ω—è–µ–º HP –±–∞–Ω–¥—ã
	if player_data:
		player_data["health"] = logic_manager.get_player_health()
	
	battle_ended.emit(true)
	queue_free()

func _on_battle_lost():
	ui_manager.add_log("üíÄ –ü–û–†–ê–ñ–ï–ù–ò–ï...")
	
	if is_first_battle:
		ui_manager.add_log("üìñ –ò–¥–∏—Ç–µ –≤ –±–æ–ª—å–Ω–∏—Ü—É!")
	
	await get_tree().create_timer(2.5).timeout
	
	if player_data:
		player_data["health"] = 20
	
	battle_ended.emit(false)
	queue_free()

# ===== –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï =====
func get_last_target() -> Dictionary:
	return {"target": last_selected_target, "zone": last_selected_zone}
